import { ReactElement } from 'react';
import Head from 'next/head';
import { NextPageWithLayout } from '../_app';
import { ModeratorLayout } from '@/components/layouts/ModeratorLayout';
import { Avatar, Box, Button, Container, Grid, GridItem, HStack, Table, TableContainer, Tbody, Td, Text, Th, Thead, Tr, VStack } from '@chakra-ui/react';
import { useRouter } from 'next/router';
import { useFetchSubmission } from '@/hooks/useFetchSubmission';
import { isChangeDetails } from '@/types/utilities';
import { useInsertNewPiece } from '@/hooks/useInsertNewPiece';
import { ChangeDetails, Published_Piece, Submission } from '@/types/manual';
import { Json } from '@/types/generated';
import { v4 as uuidv4 } from 'uuid';

const SubmissionPage: NextPageWithLayout = () => {
    const router = useRouter();
    
    console.log('router.query.id -', router.query.id);

    if (Array.isArray(router.query.id)) {
        throw Error();
    }

    const { submission } = useFetchSubmission(router.query.id);
    const { insertPiece } = useInsertNewPiece();

    const handleAccept = (changeDetails: Json) => {
        if (isChangeDetails(changeDetails)) {
            insertPiece({ 
                id: uuidv4(), // TODO: Check if the id is available in the piece table
                title: changeDetails.metadata.title,
                description: changeDetails.metadata.description,
                url_key: changeDetails.metadata.url_key,
                piece_type_id: changeDetails.metadata.piece_type_id,
                growth_stage_id: changeDetails.metadata.growth_stage_id,
                cover_url: changeDetails.metadata.cover_url,
                open_to_collab: changeDetails.metadata.open_to_collab,
                content: changeDetails.content,
            });
        }
    }

    return (
    <>
      <Head>
        <title>Submission</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container maxW={'4xl'} padding={0}>
        { submission && isChangeDetails(submission.change_details) &&
            <Grid 
                h='200px'
                templateRows='repeat(3, 1fr)'
                templateColumns='repeat(2, 1fr)'
                gap={5}
            >
                <GridItem rowSpan={3} colSpan={1} bg='tomato' />
                <GridItem rowSpan={1} colSpan={1}>
                    <Box width={'100%'} mb={4} border='1px' borderColor='gray.200' padding={2}>
                        <Text>Assigned Moderator</Text>
                    </Box>
                </GridItem>
                <GridItem rowSpan={1} colSpan={1}>
                    <Box width={'100%'} mb={4} border='1px' borderColor='gray.200' padding={2}>
                        <Text>Approve?</Text>
                    </Box>
                    <HStack>
                        <Button colorScheme='green' disabled={ !submission.change_details } onClick={
                            () => handleAccept(submission.change_details)
                            }>Accept</Button>
                        <Button colorScheme='gray'>Reject</Button>
                    </HStack>
                </GridItem>
                <GridItem rowSpan={1} colSpan={1}>
                    <Box width={'100%'} mb={4} border='1px' borderColor='gray.200' padding={2}>
                        <Text>Submission Details</Text>
                    </Box>
                    <VStack width='100%' padding={4} border='1px' borderColor='gray.200'>
                        <Avatar />
                        <Text>{ submission.change_details.contributor.name }</Text>
                    </VStack>
                    <TableContainer width={'100%'}>
                        <Box overflowX={'auto'}>
                            <Table variant='striped' colorScheme='gray' size={'sm'}>
                                <Thead>
                                <Tr>
                                    <Th>Property</Th>
                                    <Th>Value</Th>
                                </Tr>
                                </Thead>
                                <Tbody>
                                    <Tr>
                                        <Td>Title</Td>
                                        <Td>{ submission.change_details.metadata.title }</Td>
                                    </Tr>
                                    <Tr>
                                        <Td>Description</Td>
                                        <Td>{ submission.change_details.metadata.description }</Td>
                                    </Tr>
                                    <Tr>
                                        <Td>Tags</Td>
                                        <Td>{ submission.change_details.metadata.tags.join(",") }</Td>
                                    </Tr>
                                    <Tr>
                                        <Td>Type</Td>
                                        <Td>{ submission.change_details.metadata.piece_type_id }</Td>
                                    </Tr>
                                    <Tr>
                                        <Td>Growth Stage</Td>
                                        <Td>{ submission.change_details.metadata.growth_stage_id }</Td>
                                    </Tr>
                                    <Tr>
                                        <Td>Open to Collaboration</Td>
                                        <Td>{ submission.change_details.metadata.open_to_collab }</Td>
                                    </Tr>
                                    <Tr>
                                        <Td>Cover URL</Td>
                                        <Td>{ submission.change_details.metadata.cover_url }</Td>
                                    </Tr>
                                </Tbody>
                            </Table>
                        </Box>
                    </TableContainer>
                </GridItem>
            </Grid>
        }
      </Container>
    </>
  )
}

SubmissionPage.getLayout = function getLayout(page: ReactElement) {
  return (
    <ModeratorLayout>
      {page}
    </ModeratorLayout>
  )
}

export default SubmissionPage;
