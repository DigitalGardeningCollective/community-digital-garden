import { ReactElement } from 'react';
import Head from 'next/head';
import { NextPageWithLayout } from '../_app';
import { ModeratorLayout } from '@/components/layouts/ModeratorLayout';
import { Avatar, Box, Button, Container, Grid, GridItem, HStack, Modal, ModalOverlay, Table, TableContainer, Tbody, Td, Text, Th, Thead, Tr, VStack, useDisclosure } from '@chakra-ui/react';
import { useRouter } from 'next/router';
import { useFetchSubmission } from '@/hooks/useFetchSubmission';
import { isChangeDetails } from '@/types/utilities';
import { Json } from '@/types/generated';
import { PieceHeader } from '@/components/PieceHeader/PieceHeader';
import PieceContent from '@/components/PieceContent/PieceContent';
import { useCheckIfNewContributor } from '@/hooks/useCheckIfNewContributor';
import { useAcceptSubmission } from '@/hooks/useAcceptSubmission';
import { useUpdateSubmission } from '@/hooks/useUpdateSubmission';
import { RejectSubmissionForm, RejectSubmissionInput } from '@/components/RejectSubmissionForm/RejectSubmissionForm';
import { useUser } from '@supabase/auth-helpers-react';
import { useFetchModerator } from '@/hooks/useFetchModerator';

const SubmissionPage: NextPageWithLayout = () => {
    const authUser = useUser();
    const { moderator } = useFetchModerator(authUser);
    const { isOpen, onOpen, onClose } = useDisclosure();
    const router = useRouter();
    
    console.log('router.query.id -', router.query.id);

    if (Array.isArray(router.query.id)) {
        throw Error();
    }

    const { submissionView } = useFetchSubmission(router.query.id);

    const { isExistingContributor, existingContributor } = useCheckIfNewContributor(submissionView);

    // console.log('isExistingContributor -', isExistingContributor);

    // Methods
    const { acceptSubmission, isLoading } = useAcceptSubmission();
    const { markSubmissionAsRejected, isLoading: loadingRejectionResult } = useUpdateSubmission();

    // Edit Update - TODO: Check for the type of submission
    const handleAccept = async (changeDetails: Json) => {
        if (submissionView && submissionView.id && isChangeDetails(changeDetails)) {
            await acceptSubmission(submissionView.id, changeDetails, isExistingContributor, existingContributor);
        }
    }

    const handleReject = async (data: RejectSubmissionInput) => {
        // console.log('data -', data);
        if (moderator && submissionView && submissionView.id) {
            await markSubmissionAsRejected(moderator.id, submissionView.id, data.reason);
        }
        onClose();
    }

    return (
    <>
      <Head>
        <title>Submission</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container maxW={'4xl'} padding={0}>
        { isExistingContributor != null && submissionView && submissionView.created_at && isChangeDetails(submissionView.change_details) &&
            <Grid 
                h='100vh'
                templateRows='repeat(3, 1fr)'
                templateColumns='repeat(2, 1fr)'
                gap={5}
            >
                <GridItem rowSpan={3} colSpan={1} border='1px' borderColor='gray.200' padding={4}>
                    <PieceHeader
                        header={{
                            title: submissionView.change_details.metadata.title,
                            description: submissionView.change_details.metadata.description,
                            cover_url: null, // TODO: Need to deal with this
                            growth_stage: submissionView.change_details.metadata.growth_stage,
                            created_at: submissionView.created_at,
                            updated_at: null, // TODO: May not need since this is the creation step
                            contributor: {
                                id: submissionView.change_details.contributor.id,
                                full_name: submissionView.change_details.contributor.full_name,
                                avatar_url: submissionView.change_details.contributor.avatar_url,
                                bio: submissionView.change_details.contributor.bio,
                                created_at: '2023-07-23 21:05:28.699666+00', // TODO: Think about
                                updated_at: '2023-07-24 21:05:28.699666+00', // // TODO: Think about
                                username: submissionView.change_details.contributor.username
                            },
                            tags: submissionView.change_details.metadata.tags,
                          }}
                        isPreview
                    />
                    <PieceContent 
                        body={submissionView.change_details.content}
                    />
                </GridItem>
                <GridItem rowSpan={1} colSpan={1}>
                    <Box width={'100%'} mb={4} /*border='1px' borderColor='gray.200'*/ bgColor={'#2e3637'} padding={2}>
                        <Text fontWeight={'bold'} color='white'>Assigned Moderator</Text>
                    </Box>
                    <HStack>
                        <Avatar size="sm" name={'John Doe'} src={'https://randomuser.me/api/portraits/men/35.jpg'}  />
                        <Text>John Doe</Text>
                    </HStack>
                </GridItem>
                <GridItem rowSpan={1} colSpan={1}>
                    <Box width={'100%'} mb={4} bgColor={'#2e3637'} padding={2}>
                        <Text fontWeight={'bold'} color='white'>Approve?</Text>
                    </Box>
                    <HStack>
                        <Button width={'100%'} height='40' colorScheme='green' isLoading={ isLoading } disabled={ !submissionView.change_details } 
                            onClick={() => handleAccept(submissionView.change_details)}>
                                Accept
                        </Button>
                        <Button width={'100%'} height='40' colorScheme='gray'
                            onClick={onOpen}>
                            Reject
                        </Button>
                    </HStack>
                </GridItem>
                <GridItem rowSpan={1} colSpan={1}>
                    <Box width={'100%'} mb={4} bgColor={'#2e3637'} padding={2}>
                        <Text fontWeight={'bold'} color='white'>Submission Details</Text>
                    </Box>
                    <VStack width='100%' padding={4} border='1px' borderColor='gray.200'>
                        <Avatar size="sm" name={submissionView.change_details.contributor.full_name} src={submissionView.change_details.contributor.avatar_url} />
                        <Text>{ submissionView.change_details.contributor.full_name }</Text>
                        <Text fontWeight={'bold'}>{ isExistingContributor ? 'Existing Contributor' : 'New Contributor' }</Text>
                    </VStack>
                    <Container overflow={'scroll'} padding={0} maxWidth={'lg'}>
                        <TableContainer>
                            <Box>
                                <Table variant='striped' colorScheme='gray' size={'sm'}>
                                    <Thead>
                                    <Tr>
                                        <Th>Property</Th>
                                        <Th>Value</Th>
                                    </Tr>
                                    </Thead>
                                    <Tbody>
                                        <Tr>
                                            <Td>Title</Td>
                                            <Td>{ submissionView.change_details.metadata.title }</Td>
                                        </Tr>
                                        <Tr>
                                            <Td>Description</Td>
                                            <Td>{ submissionView.change_details.metadata.description }</Td>
                                        </Tr>
                                        <Tr>
                                            <Td>Tags</Td>
                                            <Td>{ submissionView.change_details.metadata.tags.join(", ") }</Td>
                                        </Tr>
                                        <Tr>
                                            <Td>Type</Td>
                                            <Td>{ submissionView.change_details.metadata.piece_type }</Td>
                                        </Tr>
                                        <Tr>
                                            <Td>Growth Stage</Td>
                                            <Td>{ submissionView.change_details.metadata.growth_stage }</Td>
                                        </Tr>
                                        <Tr>
                                            <Td>Open to Collaboration</Td>
                                            <Td>{ submissionView.change_details.metadata.open_to_collab }</Td>
                                        </Tr>
                                        <Tr>
                                            <Td>Cover URL</Td>
                                            <Td>{ submissionView.change_details.metadata.cover_url }</Td>
                                        </Tr>
                                    </Tbody>
                                </Table>
                            </Box>
                        </TableContainer>
                    </Container>
                </GridItem>
            </Grid>
        }
      </Container>
      <Modal isOpen={isOpen} onClose={onClose}>
        <ModalOverlay />
        <RejectSubmissionForm
            isLoading={loadingRejectionResult}
            onClose={onClose}
            onSubmit={handleReject}
            defaultValues={{
                reason: ""
            }}
        />
      </Modal>
    </>
  )
}

SubmissionPage.getLayout = function getLayout(page: ReactElement) {
  return (
    <ModeratorLayout>
      {page}
    </ModeratorLayout>
  )
}

export default SubmissionPage;
